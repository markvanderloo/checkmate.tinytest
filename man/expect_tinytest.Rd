% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expectations.R
\name{expect_tinytest}
\alias{expect_tinytest}
\alias{expect_access}
\alias{expect_array}
\alias{expect_atomic}
\alias{expect_atomic_vector}
\alias{expect_bit}
\alias{expect_character}
\alias{expect_choice}
\alias{expect_class}
\alias{expect_complex}
\alias{expect_count}
\alias{expect_data_frame}
\alias{expect_data_table}
\alias{expect_date}
\alias{expect_directory_exists}
\alias{expect_disjunct}
\alias{expect_double}
\alias{expect_environment}
\alias{expect_factor}
\alias{expect_file_exists}
\alias{expect_flag}
\alias{expect_formula}
\alias{expect_function}
\alias{expect_int}
\alias{expect_integer}
\alias{expect_integerish}
\alias{expect_list}
\alias{expect_logical}
\alias{expect_matrix}
\alias{expect_multi_class}
\alias{expect_named}
\alias{expect_names}
\alias{expect_number}
\alias{expect_numeric}
\alias{expect_path_for_output}
\alias{expect_posixct}
\alias{expect_r6}
\alias{expect_raw}
\alias{expect_scalar}
\alias{expect_scalar_na}
\alias{expect_set_equal}
\alias{expect_string}
\alias{expect_subset}
\alias{expect_tibble}
\title{Expectations for 'tinytest'}
\usage{
expect_access(x, access = "")

expect_array(x, mode = NULL, any.missing = TRUE, d = NULL,
  min.d = NULL, max.d = NULL, null.ok = FALSE)

expect_atomic(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL)

expect_atomic_vector(x, any.missing = TRUE, all.missing = TRUE,
  len = NULL, min.len = NULL, max.len = NULL, unique = FALSE,
  names = NULL)

expect_bit(x, len = NULL, min.len = NULL, max.len = NULL,
  min.0 = NULL, min.1 = NULL, null.ok = FALSE)

expect_character(x, min.chars = NULL, pattern = NULL, fixed = NULL,
  ignore.case = FALSE, any.missing = TRUE, all.missing = TRUE,
  len = NULL, min.len = NULL, max.len = NULL, unique = FALSE,
  sorted = FALSE, names = NULL, null.ok = FALSE)

expect_choice(x, choices, null.ok = FALSE, fmatch = FALSE)

expect_class(x, classes, ordered = FALSE, null.ok = FALSE)

expect_complex(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL,
  null.ok = FALSE)

expect_count(x, na.ok = FALSE, positive = FALSE,
  tol = sqrt(.Machine$double.eps), null.ok = FALSE)

expect_data_frame(x, types = character(0L), any.missing = TRUE,
  all.missing = TRUE, min.rows = NULL, max.rows = NULL,
  min.cols = NULL, max.cols = NULL, nrows = NULL, ncols = NULL,
  row.names = NULL, col.names = NULL, null.ok = FALSE)

expect_data_table(x, key = NULL, index = NULL, types = character(0L),
  any.missing = TRUE, all.missing = TRUE, min.rows = NULL,
  max.rows = NULL, min.cols = NULL, max.cols = NULL, nrows = NULL,
  ncols = NULL, row.names = NULL, col.names = NULL,
  null.ok = FALSE)

expect_date(x, lower = NULL, upper = NULL, any.missing = TRUE,
  all.missing = TRUE, len = NULL, min.len = NULL, max.len = NULL,
  unique = FALSE, null.ok = FALSE)

expect_directory_exists(x, access = "")

expect_disjunct(x, y, fmatch = FALSE)

expect_double(x, lower = -Inf, upper = Inf, finite = FALSE,
  any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, sorted = FALSE,
  names = NULL, null.ok = FALSE)

expect_environment(x, contains = character(0L), null.ok = FALSE)

expect_factor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, n.levels = NULL,
  min.levels = NULL, max.levels = NULL, unique = FALSE,
  names = NULL, null.ok = FALSE)

expect_file_exists(x, access = "", extension = NULL)

expect_flag(x, na.ok = FALSE, null.ok = FALSE)

expect_formula(x, null.ok = FALSE)

expect_function(x, args = NULL, ordered = FALSE, nargs = NULL,
  null.ok = FALSE)

expect_int(x, na.ok = FALSE, lower = -Inf, upper = Inf,
  tol = sqrt(.Machine$double.eps), null.ok = FALSE)

expect_integer(x, lower = -Inf, upper = Inf, any.missing = TRUE,
  all.missing = TRUE, len = NULL, min.len = NULL, max.len = NULL,
  unique = FALSE, sorted = FALSE, names = NULL, null.ok = FALSE)

expect_integerish(x, tol = sqrt(.Machine$double.eps), lower = -Inf,
  upper = Inf, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, sorted = FALSE,
  names = NULL, null.ok = FALSE)

expect_list(x, types = character(0L), any.missing = TRUE,
  all.missing = TRUE, len = NULL, min.len = NULL, max.len = NULL,
  unique = FALSE, names = NULL, null.ok = FALSE)

expect_logical(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL,
  null.ok = FALSE)

expect_matrix(x, mode = NULL, any.missing = TRUE, all.missing = TRUE,
  min.rows = NULL, max.rows = NULL, min.cols = NULL,
  max.cols = NULL, nrows = NULL, ncols = NULL, row.names = NULL,
  col.names = NULL, null.ok = FALSE)

expect_multi_class(x, classes, null.ok = FALSE)

expect_named(x, type = "named")

expect_names(x, type = "named", subset.of = NULL,
  must.include = NULL, permutation.of = NULL, identical.to = NULL,
  disjunct.from = NULL, what = "names")

expect_number(x, na.ok = FALSE, lower = -Inf, upper = Inf,
  finite = FALSE, null.ok = FALSE)

expect_numeric(x, lower = -Inf, upper = Inf, finite = FALSE,
  any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, sorted = FALSE,
  names = NULL, null.ok = FALSE)

expect_path_for_output(x, overwrite = FALSE, extension = NULL)

expect_posixct(x, lower = NULL, upper = NULL, any.missing = TRUE,
  all.missing = TRUE, len = NULL, min.len = NULL, max.len = NULL,
  unique = FALSE, sorted = FALSE, null.ok = FALSE)

expect_r6(x, classes = NULL, ordered = FALSE, cloneable = NULL,
  public = NULL, private = NULL, null.ok = FALSE)

expect_raw(x, len = NULL, min.len = NULL, max.len = NULL,
  names = NULL, null.ok = FALSE)

expect_scalar(x, na.ok = FALSE, null.ok = FALSE)

expect_scalar_na(x, null.ok = FALSE)

expect_set_equal(x, y, ordered = FALSE, fmatch = FALSE)

expect_string(x, na.ok = FALSE, min.chars = NULL, pattern = NULL,
  fixed = NULL, ignore.case = FALSE, null.ok = FALSE)

expect_subset(x, choices, empty.ok = TRUE, fmatch = FALSE)

expect_tibble(x, types = character(0L), any.missing = TRUE,
  all.missing = TRUE, min.rows = NULL, max.rows = NULL,
  min.cols = NULL, max.cols = NULL, nrows = NULL, ncols = NULL,
  row.names = NULL, col.names = NULL, null.ok = FALSE)
}
\description{
Expectations for package \CRANpkg{tinytest}.
See the respective help page in \CRANpkg{checkmate} (replace `expect_` with `check_`) for a
description of the function arguments.
}
\keyword{internal}
